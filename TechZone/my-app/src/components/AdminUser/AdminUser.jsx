import React, { useState } from 'react';
import { PlusOutlined, DeleteOutlined, EditOutlined } from '@ant-design/icons';
import { Button, Form, Upload } from 'antd';
import { useQuery, useQueryClient } from '@tanstack/react-query';
import { useDispatch, useSelector } from 'react-redux';

import TableComponent from '../TableComponent/TableComponent';
import InputComponent from '../InputComponent/InputComponent';
import DrawerComponent from '../DrawerComponent/DrawerComponent';
import ModalComponent from '../ModalComponent/ModalComponent';

import * as message from '../../components/Message/Message';
import * as UserService from '../../services/UserService';
import { useMutationHooks } from '../../hooks/useMutationHook';
import { getBase64 } from '../../utils';
import { updateUser } from '../../redux/slides/userSlide';
import { WrapperHeader } from './style';

const IMG_URL = process.env.REACT_APP_IMAGE_URL || "http://localhost:3001";

const AdminUser = () => {
  const [isOpenDrawer, setIsOpenDrawer] = useState(false);
  const [rowSelected, setRowSelected] = useState('');
  const [formDrawer] = Form.useForm();
  const [isModalOpenDelete, setIsModalOpenDelete] = useState(false);
  const [isModalOpenDeleteMany, setIsModalOpenDeleteMany] = useState(false);
  const [selectedRowKeys, setSelectedRowKeys] = useState([]);

  const [avatarPreview, setAvatarPreview] = useState('');
  const [avatarFile, setAvatarFile] = useState(null);

  const dispatch = useDispatch();
  const currentUser = useSelector((state) => state.user);
  const queryClient = useQueryClient();

  const mutationCreate = useMutationHooks(({ data }) => UserService.createUser(data));
  const mutationUpdate = useMutationHooks(({ id, data }) => UserService.updateUser(id, data));
  const mutationDelete = useMutationHooks(({ id }) => UserService.deleteUser(id));
  const mutationDeleteMany = useMutationHooks((data) => UserService.deleteManyUser(data));

  const getAllUsers = async () => {
    const res = await UserService.getAllUser(currentUser?.access_token);
    return res?.status === 'ok' ? res.data : [];
  };

  const { isLoading: isLoadingUsers, data: users } = useQuery({
    queryKey: ['users'],
    queryFn: getAllUsers,
  });

  const handleCloseDrawer = () => {
    setIsOpenDrawer(false);
    setRowSelected('');
    formDrawer.resetFields();
    setAvatarPreview('');
    setAvatarFile(null);
  };

  const handleUploadAvatar = async ({ file, fileList }) => {
    const originFile = file.originFileObj || fileList?.[0]?.originFileObj;
    if (!originFile) return;
    const preview = await getBase64(originFile);
    setAvatarPreview(preview);
    setAvatarFile(originFile);
  };

  const onFinish = (values) => {
    const formData = new FormData();

    if (!rowSelected) {
      const { password, confirmPassword, ...rest } = values;
      if (password !== confirmPassword) {
        return message.error('M·∫≠t kh·∫©u x√°c nh·∫≠n kh√¥ng kh·ªõp!');
      }
      for (let key in rest) formData.append(key, rest[key]);
      formData.append('password', password);
      formData.append('confirmPassword', confirmPassword);
    } else {
      for (let key in values) formData.append(key, values[key]);
    }

    if (avatarFile) {
      formData.append('avatar', avatarFile);
    }

    if (rowSelected) {
      mutationUpdate.mutate({ id: rowSelected, data: formData }, {
        onSuccess: (res) => {
          if (res?.status === 'ok') {
            message.success('C·∫≠p nh·∫≠t ng∆∞·ªùi d√πng th√†nh c√¥ng');

            // üü° N·∫øu ƒëang s·ª≠a ch√≠nh m√¨nh th√¨ c·∫≠p nh·∫≠t Redux
            if (rowSelected === currentUser.id) {
              dispatch(updateUser({
                ...res.data,
                access_token: currentUser.access_token
              }));
            }

            queryClient.invalidateQueries(['users']);
            handleCloseDrawer();
          } else {
            message.error('C·∫≠p nh·∫≠t th·∫•t b·∫°i');
          }
        },
      });
    } else {
      mutationCreate.mutate({ data: formData }, {
        onSuccess: (res) => {
          res?.status === 'OK'
            ? message.success('T·∫°o ng∆∞·ªùi d√πng th√†nh c√¥ng')
            : message.error(res?.message || 'T·∫°o th·∫•t b·∫°i');
          handleCloseDrawer();
        },
        onSettled: () => queryClient.invalidateQueries(['users']),
      });
    }
  };

  const handleDeleteUser = () => {
    setIsModalOpenDelete(false);
    mutationDelete.mutate({ id: rowSelected }, {
      onSuccess: (res) => {
        res?.status === 'OK'
          ? message.success('X√≥a ng∆∞·ªùi d√πng th√†nh c√¥ng')
          : message.error('X√≥a th·∫•t b·∫°i');
        setRowSelected('');
      },
      onSettled: () => queryClient.invalidateQueries(['users']),
    });
  };

  const handleDeleteMany = () => {
    setIsModalOpenDeleteMany(false);
    if (selectedRowKeys.length === 0) return message.warning('B·∫°n ch∆∞a ch·ªçn ng∆∞·ªùi d√πng n√†o');
    mutationDeleteMany.mutate(selectedRowKeys, {
      onSuccess: (res) => {
        res?.status === 'OK'
          ? message.success('ƒê√£ x√≥a nhi·ªÅu ng∆∞·ªùi d√πng')
          : message.error(res?.message || 'X√≥a th·∫•t b·∫°i');
        setSelectedRowKeys([]);
      },
      onSettled: () => queryClient.invalidateQueries(['users']),
    });
  };

  const columns = [
    { title: 'T√™n', dataIndex: 'name' },
    { title: 'Email', dataIndex: 'email' },
    { title: 'SƒêT', dataIndex: 'phone' },
    {
      title: '·∫¢nh',
      dataIndex: 'avatar',
      render: (url) =>
        url ? (
          <img
            src={`${IMG_URL}${url}`}
            alt="avatar"
            style={{ width: 40, height: 40, borderRadius: '50%' }}
          />
        ) : (
          'Kh√¥ng c√≥'
        ),
    },
    {
      title: 'Quy·ªÅn',
      dataIndex: 'isAdmin',
      render: (val) => (val ? 'Admin' : 'User'),
    },
    {
      title: 'H√†nh ƒë·ªông',
      render: (_, record) => (
        <>
          <DeleteOutlined
            style={{ color: 'red', fontSize: 22, cursor: 'pointer' }}
            onClick={() => {
              setRowSelected(record._id);
              setIsModalOpenDelete(true);
            }}
          />
          <EditOutlined
            style={{ color: 'green', fontSize: 22, marginLeft: 12, cursor: 'pointer' }}
            onClick={() => {
              setRowSelected(record._id);
              formDrawer.setFieldsValue({ ...record });
              setAvatarPreview(record.avatar ? `${IMG_URL}${record.avatar}` : '');
              setAvatarFile(null);
              setIsOpenDrawer(true);
            }}
          />
        </>
      ),
    },
  ];

  const dataTable = Array.isArray(users)
    ? users.map((user) => ({ ...user, key: user._id }))
    : [];

  return (
    <div>
      <WrapperHeader>Qu·∫£n l√Ω ng∆∞·ªùi d√πng</WrapperHeader>

      <div style={{ marginBottom: 16 }}>
        <Button
          type="primary"
          icon={<PlusOutlined />}
          onClick={() => {
            setRowSelected('');
            formDrawer.resetFields();
            setAvatarPreview('');
            setIsOpenDrawer(true);
          }}
          style={{ marginRight: 10 }}
        >
          Th√™m ng∆∞·ªùi d√πng
        </Button>
        <Button
          danger
          onClick={() => setIsModalOpenDeleteMany(true)}
          disabled={selectedRowKeys.length === 0}
        >
          X√≥a nhi·ªÅu
        </Button>
      </div>

      <TableComponent
        rowSelection={{
          selectedRowKeys,
          onChange: (selectedKeys) => setSelectedRowKeys(selectedKeys),
        }}
        columns={columns}
        isLoading={isLoadingUsers}
        data={dataTable}
      />

      <ModalComponent
        title="X√≥a ng∆∞·ªùi d√πng"
        open={isModalOpenDelete}
        onCancel={() => setIsModalOpenDelete(false)}
        onOk={handleDeleteUser}
      >
        B·∫°n mu·ªën x√≥a ng∆∞·ªùi d√πng n√†y kh√¥ng?
      </ModalComponent>

      <ModalComponent
        title="X√≥a nhi·ªÅu ng∆∞·ªùi d√πng"
        open={isModalOpenDeleteMany}
        onCancel={() => setIsModalOpenDeleteMany(false)}
        onOk={handleDeleteMany}
      >
        B·∫°n mu·ªën x√≥a c√°c ng∆∞·ªùi d√πng ƒë√£ ch·ªçn kh√¥ng?
      </ModalComponent>

      <DrawerComponent
        title={rowSelected ? 'Ch·ªânh s·ª≠a ng∆∞·ªùi d√πng' : 'T·∫°o ng∆∞·ªùi d√πng'}
        isOpen={isOpenDrawer}
        onClose={handleCloseDrawer}
        width="60%"
      >
        <Form
          form={formDrawer}
          labelCol={{ span: 4 }}
          wrapperCol={{ span: 20 }}
          onFinish={onFinish}
        >
          {['name', 'email', 'phone'].map((field) => (
            <Form.Item
              key={field}
              name={field}
              label={field.charAt(0).toUpperCase() + field.slice(1)}
              rules={[{ required: true, message: `${field} l√† b·∫Øt bu·ªôc` }]}
            >
              <InputComponent type="text" />
            </Form.Item>
          ))}

          {!rowSelected && (
            <>
              <Form.Item
                name="password"
                label="Password"
                rules={[{ required: true, message: 'Password l√† b·∫Øt bu·ªôc' }]}
              >
                <InputComponent type="password" />
              </Form.Item>
              <Form.Item
                name="confirmPassword"
                label="Confirm Password"
                rules={[{ required: true, message: 'X√°c nh·∫≠n m·∫≠t kh·∫©u l√† b·∫Øt bu·ªôc' }]}
              >
                <InputComponent type="password" />
              </Form.Item>
            </>
          )}

          <Form.Item label="·∫¢nh ƒë·∫°i di·ªán">
            <div style={{ display: 'flex', alignItems: 'center' }}>
              <Upload
                onChange={handleUploadAvatar}
                maxCount={1}
                showUploadList={false}
                beforeUpload={() => false}
              >
                <Button>Ch·ªçn ·∫£nh</Button>
              </Upload>

              {avatarPreview && (
                <img
                  src={avatarPreview}
                  alt="avatar"
                  style={{ width: 60, height: 60, marginLeft: 10 }}
                />
              )}
            </div>
          </Form.Item>

          <Form.Item wrapperCol={{ offset: 20, span: 16 }}>
            <Button type="primary" htmlType="submit">
              {rowSelected ? 'C·∫≠p nh·∫≠t' : 'T·∫°o'}
            </Button>
          </Form.Item>
        </Form>
      </DrawerComponent>
    </div>
  );
};

export default AdminUser;
